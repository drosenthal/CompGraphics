# This .cfg file is used to generate the class which implements the GL
# interface on a particular platform.
Package net.java.games.jogl
Style ImplOnly
JavaClass GL
ImplPackage net.java.games.jogl.impl.windows
ImplJavaClass WindowsGLImpl
Include gl-common-win32.cfg
Include gl-glx-common.cfg

EmitProcAddressTable true
ProcAddressTableClassName GLProcAddressTable
ContextVariableName _context

CustomCCode #define WIN32_LEAN_AND_MEAN
CustomCCode #include <windows.h>
CustomCCode #undef WIN32_LEAN_AND_MEAN
CustomCCode #include <stdlib.h>
CustomCCode #include <stddef.h>
CustomCCode #include <malloc.h>

CustomCCode /* Define GL_GLEXT_PROTOTYPES so that the OpenGL extension prototypes in
CustomCCode    "glext.h" are parsed. */
CustomCCode #define GL_GLEXT_PROTOTYPES

CustomCCode /* Define WGL_GLEXT_PROTOTYPES so that the OpenGL extension prototypes in
CustomCCode    "wglext.h" are parsed. */
CustomCCode #define WGL_GLEXT_PROTOTYPES

CustomCCode /* Include the OpenGL headers */
CustomCCode #include <GL/gl.h>
CustomCCode #include <GL/wglext.h>

CustomCCode /* This typedef is only needed for VC6 */
CustomCCode #if _MSC_VER <= 1200
CustomCCode typedef int intptr_t;
CustomCCode #endif

CustomJavaCode WindowsGLImpl  public WindowsGLImpl(WindowsGLContext context) { 
CustomJavaCode WindowsGLImpl    this._context = context; 
CustomJavaCode WindowsGLImpl  }

CustomJavaCode WindowsGLImpl  public boolean isFunctionAvailable(String glFunctionName)
CustomJavaCode WindowsGLImpl  {
CustomJavaCode WindowsGLImpl    return _context.isFunctionAvailable(glFunctionName);
CustomJavaCode WindowsGLImpl  }

CustomJavaCode WindowsGLImpl  public boolean isExtensionAvailable(String glExtensionName)
CustomJavaCode WindowsGLImpl  {
CustomJavaCode WindowsGLImpl    return _context.isExtensionAvailable(glExtensionName);
CustomJavaCode WindowsGLImpl  }

CustomJavaCode WindowsGLImpl  private WindowsGLContext _context;

CustomJavaCode WindowsGLImpl   /**
CustomJavaCode WindowsGLImpl    * Provides platform-independent access to the wglAllocateMemoryNV /
CustomJavaCode WindowsGLImpl    * glXAllocateMemoryNV extension.
CustomJavaCode WindowsGLImpl    */
CustomJavaCode WindowsGLImpl   public java.nio.ByteBuffer glAllocateMemoryNV(int arg0, float arg1, float arg2, float arg3) {
CustomJavaCode WindowsGLImpl     return wglAllocateMemoryNV(arg0, arg1, arg2, arg3);
CustomJavaCode WindowsGLImpl   }

CustomJavaCode WindowsGLImpl   public void setSwapInterval(int interval) {
CustomJavaCode WindowsGLImpl     if (isExtensionAvailable("WGL_EXT_swap_control")) {
CustomJavaCode WindowsGLImpl       wglSwapIntervalEXT(interval);
CustomJavaCode WindowsGLImpl     }
CustomJavaCode WindowsGLImpl   }

IncludeAs CustomJavaCode WindowsGLImpl gl-impl-CustomJavaCode.java
IncludeAs CustomCCode gl-impl-CustomCCode.c
